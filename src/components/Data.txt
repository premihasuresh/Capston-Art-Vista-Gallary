 server.js
require('dotenv').config();
const express = require('express');
const connectDB = require('./config/db');
const authRoutes = require('./routes/auth'); // Import the auth routes
const testRoutes = require('./routes/test'); // Import the test routes
const paymentRoutes = require('./routes/payments'); // Import payment routes
const artworkRoutes = require('./routes/artworks'); // Import artworks routes

const app = express();

// Connect to MongoDB
connectDB();

// Middleware
app.use(express.json());

// Routes
app.use('/api/auth', authRoutes); // Use the auth routes
app.use('/api/artworks', artworkRoutes); // Use the artworks routes
app.use('/api/test', testRoutes); // Use the test routes
app.use('/api/payments', paymentRoutes); // Use the payment routes
// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
}); 

cartslice.js 
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  items: [],
};

const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    addItem: (state, action) => {
      console.log('Reducer received:', action.payload);
      state.items.push(action.payload);
    },
  },
});

export const { addItem } = cartSlice.actions;
export default cartSlice.reducer;

pages/cart.js 
import React from 'react';
import { useSelector } from 'react-redux';

const Cart = () => {
  const cartItems = useSelector((state) => state.cart.items);
  console.log('Cart items:', cartItems); // Debug log

  return (
    <div>
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item, index) => (
          <div key={index}>
            <h3>{item.name}</h3>
            {item.imageurls && item.imageurls.map((url, idx) => (
              <img key={idx} src={url} alt={`Item ${index} - ${idx}`} style={{ width: '100px', height: '100px' }} />
            ))}
          </div>
        ))
      )}
    </div>
  );
};

export default Cart;

artworks.js
router.get('/', async (req, res) => {
    try {
        const { query, category } = req.query;
        const filter = {};
        if (query) filter.title = { $regex: query, $options: 'i' };
        if (category) filter.category = category;

        const artworks = await Artwork.find(filter);
        res.json(artworks);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
}); 
models/cart.js
// src/pages/Cart.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { removeFromCart } from '../redux/actions/cartActions';

const Cart = () => {
  const cartItems = useSelector((state) => state.cart.items);
  const dispatch = useDispatch();

  const handleRemove = (itemId) => {
    dispatch(removeFromCart(itemId));
  };

  const handleCheckout = () => {
    window.location.href = '/checkout';
  };

  return (
    <div>
      <h1>Your Cart</h1>
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <div>
          <ul>
            {cartItems.map(item => (
              <li key={item.id}>
                <span>{item.name} - ${item.price}</span>
                <button onClick={() => handleRemove(item.id)}>Remove</button>
              </li>
            ))}
          </ul>
          <button onClick={handleCheckout}>Proceed to Checkout</button>
        </div>
      )}
    </div>
  );
};

export default Cart; 
db.js
const mongoose = require('mongoose');
const config = require('config');
const db = config.get('mongoURI');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

module.exports = connectDB; 

MONGO_URI=mongodb+srv://premihasuresh28:PremihA%4028@cluster1.au2kbhh.mongodb.net/?retryWrites=true&w=majority&appName=Cluster1

pages/home.jsimport React from 'react';
import './Home.css'; 

const Home = () => {
  return (
    <div className="home-page">
      <div className="home-content">
      <h1>Welcome to ArtVista Gallery</h1>
    </div>
    </div>
  );
};

export default Home;

cartSlice.js import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

export const addToCart = createAsyncThunk(
  'cart/addToCart',
  async (product, thunkAPI) => {
    try {
      const response = await axios.post('/api/cart/add', {
        productId: product.id,
        imageUrl: product.imageUrl,
        quantity: 1, // Adjust quantity as needed
      });
      return response.data;
    } catch (error) {
      return thunkAPI.rejectWithValue(error.response.data);
    }
  }
);

const cartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [],
    isLoading: false,
    error: null,
  },
  reducers: {
    removeFromCart: (state, action) => {
      state.items = state.items.filter(item => item.id !== action.payload);
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(addToCart.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(addToCart.fulfilled, (state, action) => {
        state.isLoading = false;
        state.items.push(action.payload);
      })
      .addCase(addToCart.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      });
  },
});

export const { removeFromCart } = cartSlice.actions;

export default cartSlice.reducer;

index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './redux/store';
import App from './App';
import './index.css';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
// src/components/Item.js
import React from 'react';

const Item = ({ name, imageUrl, handleAction }) => {
  return (
    <div>
      <img src={imageUrl} alt={name} style={{ width: '100px', height: '100px' }} />
      <p>{name}</p>
      <button onClick={handleAction}>Add to Cart</button>
    </div>
  );
};

export default Item;

productList.js
import React from 'react';
import { useDispatch } from 'react-redux';
import { addItem } from '../redux/slices/cartSlice';

const ProductCard = ({ product }) => {
  const dispatch = useDispatch();

  const handleAddToCart = () => {
    dispatch(addItem(product));
  };

  return (
    <div>
      <img src={product.image} alt={product.name} />
      <h3>{product.name}</h3>
      <p>{product.description}</p>
      <p>Price: ${product.price}</p>
      <button onClick={handleAddToCart}>Add to cart</button>
    </div>
  );
};

export default ProductCard;

pages/cart.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { removeFromCart } from '../redux/slices/cartSlice';

const Cart = () => {
  const cartItems = useSelector((state) => state.cart.items);
  const dispatch = useDispatch();

  const handleRemoveFromCart = (itemId) => {
    dispatch(removeFromCart(itemId));
  };

  return (
    <div>
      <h1>Shopping Cart</h1>
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <ul>
          {cartItems.map((item) => (
            <li key={item.id}>
              <h2>{item.name}</h2>
              <p>{item.description}</p>
              <p>Price: ${item.price}</p>
              <div>
                {item.imageurls && item.imageurls.map((url, index) => (
                  <img key={index} src={url} alt={item.name} style={{ width: '100px', height: '100px' }} />
                ))}
              </div>
              <button onClick={() => handleRemoveFromCart(item.id)}>Remove</button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default Cart; 

homepage.css
.home-page {
    background-image: url('https://dhfczbzvtn6lt.cloudfront.net/wp-content/uploads/2021/07/ArtGallery_Gallery2.jpg');
    background-size: cover;
    background-position: center;
    height: 100vh; /* Full viewport height */
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    text-align: center;
    font-size:large;
}
  home-content {
    background: rgba(0, 0, 0, 0.5); /* Black background with transparency */
    padding: 20px;
    border-radius: 10px;
  };
 Home.js import React from 'react';
import { Link } from 'react-router-dom';
import './Home.css'; 

const Home = () => {
  const products = [
    { id: '1', name: 'Sunflower' },
    { id: '2', name: 'Rose' },
    { id: '3', name: 'Hibiscus' },
    { id: '4', name: 'Bird' },
    { id: '5', name: 'Forest' },
    { id: '6', name: 'Landscape' },
    { id: '7', name: 'Food' },
    { id: '8', name: 'Plant' }
  ];

  return (
    <div className="home-container">
      <h1>Home</h1>
      <ul className="product-list">
        {products.map(product => (
          <li key={product.id} className="product-item">
            <Link to={`/product/${product.id}`} className="product-link">{product.name}</Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Home; 

productDetail.js 
import React from 'react';
import { useParams, Link } from 'react-router-dom';
import AddToCart from '../components/AddToCart';
import './ProductDetails.css';

const ProductDetails = () => {
  const { id } = useParams();
  const products = [
    { id: '1', name: 'Sunflower', price: 100, description: 'The sunflower is a tall, bright yellow annual plant known for its large flower heads and nutrient-rich seeds.' },
    { id: '2', name: 'Rose', price: 200, description: 'The rose is a fragrant, woody perennial flower known for its layered petals and vibrant colors, often symbolizing love and beauty.' },
    { id: '3', name: 'Hibiscus', price: 250, description: 'Hibiscus is a vibrant tropical plant with large, colorful flowers, often used in gardens and herbal teas.' },
    { id: '4', name: 'Bird', price: 300, description: 'Birds are warm-blooded vertebrates characterized by feathers, beaks, and a high metabolic rate, known for their ability to fly and melodic songs.' },
    { id: '5', name: 'Forest', price: 360, description: 'A forest is a dense, lush expanse of trees and undergrowth, teeming with diverse wildlife and resonating with the sounds of nature.' },
    { id: '6', name: 'Landscape', price: 400, description: 'A landscape is a picturesque view of natural scenery, encompassing mountains, valleys, rivers, and fields that create a harmonious connection between earth and sky.' },
    { id: '7', name: 'Food', price: 480, description: 'Food is a delightful array of flavors, textures, and aromas that nourish the body and bring people together in shared experiences.' },
    { id: '8', name: 'Plant', price: 380, description: 'A plant is a living organism that grows from the earth, utilizing sunlight, water, and nutrients to flourish and contribute to the ecosystem.' },
    { id: '9', name: 'House', price: 480, description: 'A house is a place where people live, providing shelter and a space for daily activities and family life.' },
    { id: '10', name: 'Villa', price: 800, description: 'A villa is a luxurious, spacious residence often situated in a scenic or tranquil setting, offering comfort, elegance, and privacy.' },
    { id: '11', name: 'City', price: 700, description: 'A city is a bustling urban center teeming with people, diverse cultures, towering buildings, and a vibrant array of activities and opportunities.' },
    { id: '12', name: 'Built Bike', price: 800, description: 'A built bike refers to a bicycle that has been fully assembled, often customized or upgraded with specific parts for performance, comfort, or aesthetic appeal.' },
    { id: '13', name: 'Portrait', price: 650, description: 'An old portrait is a timeless depiction of an individual, capturing their likeness and essence from a bygone era, often evoking a sense of history and nostalgia.' },
    { id: '14', name: 'Gallery', price: 1000, description: 'A gallery is a curated space where artworks, photographs, and other creative expressions are displayed for public viewing and appreciation.' },
    { id: '15', name: 'Music', price: 750, description: 'Music is an art form composed of organized sound and silence, evoking emotions and telling stories through melody, harmony, rhythm, and timbre.' },
    { id: '16', name: 'Campfire', price: 450, description: 'A campfire is a blazing outdoor fire, often the focal point of gatherings, providing warmth, light, and a cozy atmosphere for storytelling and bonding.' },
    { id: '17', name: 'Concert', price: 600, description: 'A concert is a live musical performance featuring musicians or bands, often held in venues ranging from intimate clubs to large arenas, providing an immersive experience for audiences.' },
    { id: '18', name: 'Painting', price: 770, description: 'A painting is an artistic creation made by applying pigments to a surface, expressing ideas, emotions, and stories through color, texture, and composition.' },
    { id: '19', name: 'Still Life Photography', price: 1000, description: 'Still life photography is the art of capturing inanimate objects arranged in a purposeful composition, focusing on detail, texture, light, and shadow to create visually compelling and often symbolic images.' },
    { id: '20', name: 'Football', price: 800, description: 'Football is a dynamic and strategic sport played between two teams, where players aim to score goals by maneuvering a ball into the opposing teams net, celebrated worldwide for its excitement and athleticism.' },
    { id: '21', name: 'Living Room', price: 1500, description: 'A living room is a welcoming and versatile space in a home, designed for relaxation and socializing, typically featuring comfortable seating, entertainment systems, and personalized decor to create a cozy and inviting atmosphere.' },
    { id: '22', name: 'Art Work', price: 250, description: 'Artwork is a creative expression manifested through various mediums such as painting, sculpture, photography, or digital art, reflecting the artists vision, emotions, and ideas, often evoking thought and appreciation in its audience.' },
    { id: '23', name: 'New York', price: 400, description: 'New York is a bustling, vibrant metropolis known for its iconic skyline, diverse neighborhoods, cultural landmarks, and dynamic energy, blending historic charm with modern innovation and serving as a global hub for art, commerce, and entertainment.' },
    { id: '24', name: 'Art', price: 600, description: 'Art is a diverse range of human activities and creations that express ideas, emotions, and perspectives through various forms such as painting, sculpture, music, dance, and literature, often aiming to provoke thought, evoke feelings, or simply provide aesthetic pleasure.' },
  ];

  const product = products.find(p => p.id === id);

  if (!product) {
    return <div>Product not found</div>;
  }

  return (
    <div className="Product-details-container">
      <h1>{product.name}</h1>
      <p>{product.description}</p>
      <p>${product.price}</p>
      <AddToCart item={product} />
      <br />
      <Link to="/cart">Go to Cart</Link> 
    </div>
  );
};

export default ProductDetails; 

server.js
require('dotenv').config(); // Load environment variables from .env file
const express = require('express');
const connectDB = require('./config/db');
const productsRoute = require('./routes/products'); 


// Import routes
const authRoutes = require('./routes/auth');
const artworkRoutes = require('./routes/artworks');
const cartRoutes = require('./routes/cart');
const paymentRoutes = require('./routes/payments'); // Assuming you have payment routes

const app = express();

// Connect to MongoDB
connectDB();

// Middleware
app.use(express.json());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/artworks', artworkRoutes);
app.use('/api/cart', cartRoutes);
app.use('/api/payments', paymentRoutes);
app.use('/api/products', productsRoute); // Correct route usage

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

Home.js
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch('/api/products') // Adjust the endpoint according to your backend routes
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        setProducts(data);
        setLoading(false);
      })
      .catch(error => {
        setError(error);
        setLoading(false);
      });
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <div>
      <h1>Home</h1>
      <ul>
        {products.map(product => (
          <li key={product.id}>
            <Link to={`/product/${product.id}`}>{product.name}</Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Home; 

db.js
const config = require('config');
const mongoose = require('mongoose');

const db = config.get('mongoURI');

const connectDB = async () => {
  try {
    await mongoose.connect(db, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB Connected...');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

module.exports = connectDB; 

Homepage.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const HomePage = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/test');
        setData(response.data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h1>Data from API</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
};

export default HomePage; 

Homepage.css
.home-page {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.loading {
  color: #007bff;
}

.error {
  color: #dc3545;
}

.data-container {
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 5px;
} 

index.js
import React from 'react';
import ReactDOM from 'react-dom/client'; // Updated import
import { Provider } from 'react-redux';
import store from './redux/store';
import App from './App';
import './index.css';

// Create a root and render your app
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
); 

routes/auth.js
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Registration Route
router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;

    try {
        // Check if the user already exists
        let user = await User.findOne({ email });
        if (user) {
            return res.status(400).json({ msg: 'User already exists' });
        }

        // Create a new user
        user = new User({
            username,
            email,
            password,
        });

        // Hash the password
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(password, salt);

        // Save the user
        await user.save();

        // Generate JWT
        const payload = {
            user: {
                id: user.id,
            },
        };

        jwt.sign(
            payload,
            process.env.JWT_SECRET,
            { expiresIn: '1h' },
            (err, token) => {
                if (err) throw err;
                res.json({ token });
            }
        );
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
});

module.exports = router;

db.js
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB Connected...');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

module.exports = connectDB;

server.js 
require('dotenv').config(); // Load environment variables from .env file
const express = require('express');
const cors = require('cors'); // Import cors
const connectDB = require('./config/db');

// Import routes
const authRoutes = require('./routes/auth');
const artworkRoutes = require('./routes/artworks');
const cartRoutes = require('./routes/cart');
const paymentRoutes = require('./routes/payments'); // Assuming you have payment routes
const itemsRoutes = require('./routes/items'); // Import items routes

const app = express();

// Enable CORS
app.use(cors());

// Connect to MongoDB
connectDB();

// Middleware
app.use(express.json());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/artworks', artworkRoutes);
app.use('/api/cart', cartRoutes);
app.use('/api/payments', paymentRoutes);
app.use('/api/items', itemsRoutes); // Add this line


// Test route
app.get('/api/test', (req, res) => {
  res.json({ message: 'This is a test endpoint' });
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

RegisterForm.js
import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { useNavigate } from 'react-router-dom';
import '../styles/RegistrationForm.css';
import '../styles/common.css';

const RegistrationForm = () => {
    const navigate = useNavigate();

    const initialValues = {
        username: '',
        email: '',
        password: '',
    };

    const validationSchema = Yup.object({
        username: Yup.string().required('Required'),
        email: Yup.string().email('Invalid email format').required('Required'),
        password: Yup.string().required('Required'),
    });

    const onSubmit = async (values, { setSubmitting }) => {
        console.log('Form submitted:', values); // Log the submitted values
        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(values),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.msg || 'Registration failed');
            }

            const responseData = await response.json();
            console.log('Registration successful', responseData);
            navigate('/nextpage'); // Navigate to the next page after successful registration
        } catch (error) {
            console.error('Registration failed', error);
            alert(error.message); // Optionally, display the error message to the user
        } finally {
            setSubmitting(false); // Allow button to be clickable again
        }
    };

    return (
        <div className="form-container">
            <div className="form-card">
                <h1>Register</h1>
                <Formik
                    initialValues={initialValues}
                    validationSchema={validationSchema}
                    onSubmit={onSubmit}
                >
                    {({ isSubmitting }) => (
                        <Form>
                            <div>
                                <label htmlFor="username">Username</label>
                                <Field type="text" id="username" name="username" />
                                <ErrorMessage name="username" component="div" className="error" />
                            </div>
                            <div>
                                <label htmlFor="email">Email</label>
                                <Field type="email" id="email" name="email" />
                                <ErrorMessage name="email" component="div" className="error" />
                            </div>
                            <div>
                                <label htmlFor="password">Password</label>
                                <Field type="password" id="password" name="password" />
                                <ErrorMessage name="password" component="div" className="error" />
                            </div>
                            <button type="submit" disabled={isSubmitting}>Register</button>
                        </Form>
                    )}
                </Formik>
            </div>
        </div>
    );
};

export default RegistrationForm;

auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Register user
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  if (!username || !email || !password) {
    return res.status(400).json({ msg: 'Please enter all fields' });
  }

  try {
    let user = await User.findOne({ email });

    if (user) {
      return res.status(400).json({ msg: 'User already exists' });
    }

    user = new User({
      username,
      email,
      password
    });

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);

    await user.save();

    const payload = {
      user: {
        id: user.id
      }
    };

    jwt.sign(
      payload,
      process.env.JWT_SECRET,
      { expiresIn: 3600 },
      (err, token) => {
        if (err) throw err;
        res.json({ token });
      }
    );
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server error');
  }
});

module.exports = router;

RegisterForm.js
import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

// Define validation schema using Yup
const validationSchema = Yup.object({
  username: Yup.string()
    .min(2, 'Username must be at least 2 characters')
    .max(50, 'Username cannot be more than 50 characters')
    .required('Username is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(6, 'Password must be at least 6 characters')
    .required('Password is required'),
});

// Define initial values for the form fields
const initialValues = {
  username: '',
  email: '',
  password: '',
};

// Handle form submission
const handleSubmit = async (values, { setSubmitting }) => {
  console.log('Form values:', values); // Log form values

  try {
    const response = await fetch('/api/auth/register', { // Ensure this matches your backend route
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(values),
    });

    const result = await response.json();
    console.log('Response:', result); // Log server response

    if (response.ok) {
      alert('Registration successful!');
    } else {
      console.error(result);
      alert(`Registration failed: ${result.message}`);
    }
  } catch (error) {
    console.error('Error:', error);
    alert('An error occurred. Please try again.');
  } finally {
    setSubmitting(false);
  }
};

const RegisterForm = () => {
  return (
    <Formik
      initialValues={initialValues} // Set initial values for the form fields
      validationSchema={validationSchema} // Apply validation rules
      onSubmit={handleSubmit} // Attach submit handler
    >
      {({ isSubmitting }) => (
        <Form>
          <div>
            <label htmlFor="username">Username</label>
            <Field
              type="text"
              id="username"
              name="username"
              placeholder="Username"
            />
            <ErrorMessage name="username" component="div" className="error" />
          </div>

          <div>
            <label htmlFor="email">Email</label>
            <Field
              type="email"
              id="email"
              name="email"
              placeholder="Email"
            />
            <ErrorMessage name="email" component="div" className="error" />
          </div>

          <div>
            <label htmlFor="password">Password</label>
            <Field
              type="password"
              id="password"
              name="password"
              placeholder="Password"
            />
            <ErrorMessage name="password" component="div" className="error" />
          </div>

          <button
            type="submit"
            disabled={isSubmitting} // Disable button while submitting
          >
            {isSubmitting ? 'Registering...' : 'Register'}
          </button>
        </Form>
      )}
    </Formik>
  );
};

export default RegisterForm; 

auth.js
const express = require('express');
const router = express.Router();
const User = require('../models/User'); // Assuming you have a User model
const bcrypt = require('bcryptjs'); // For password hashing

// POST /api/auth/register
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  try {
    // Check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create new user
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });

    // Save user to the database
    await newUser.save();
    res.status(201).json({ message: 'User registered successfully!' });
  } catch (error) {
    res.status(500).json({ message: 'Registration failed', error });
  }
});

module.exports = router;

RegistractionForm.js
import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

// Define initial values for the form fields
const initialValues = {
  username: '',
  email: '',
  password: '',
};

// Define validation schema using Yup
const validationSchema = Yup.object({
  username: Yup.string()
    .min(2, 'Username must be at least 2 characters')
    .max(50, 'Username cannot be more than 50 characters')
    .required('Username is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(6, 'Password must be at least 6 characters')
    .required('Password is required'),
});

// Handle form submission
const handleSubmit = async (values, { setSubmitting }) => {
  console.log('Form values:', values); // Log form values

  try {
    const response = await fetch('/api/auth/register', { // Ensure this matches your backend route
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(values),
    });

    const result = await response.json();
    console.log('Response:', result); // Log server response

    if (response.ok) {
      alert('Registration successful!');
    } else {
      console.error(result);
      alert(`Registration failed: ${result.message}`);
    }
  } catch (error) {
    console.error('Error:', error);
    alert('An error occurred. Please try again.');
  } finally {
    setSubmitting(false);
  }
};

const RegisterForm = () => (
  <Formik
    initialValues={initialValues}
    validationSchema={validationSchema}
    onSubmit={handleSubmit}
  >
    {({ isSubmitting }) => (
      <Form>
        <div>
          <label htmlFor="username">Username</label>
          <Field
            type="text"
            id="username"
            name="username"
            placeholder="Username"
          />
          <ErrorMessage name="username" component="div" className="error" />
        </div>

        <div>
          <label htmlFor="email">Email</label>
          <Field
            type="email"
            id="email"
            name="email"
            placeholder="Email"
          />
          <ErrorMessage name="email" component="div" className="error" />
        </div>

        <div>
          <label htmlFor="password">Password</label>
          <Field
            type="password"
            id="password"
            name="password"
            placeholder="Password"
          />
          <ErrorMessage name="password" component="div" className="error" />
        </div>

        <button type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Registering...' : 'Register'}
        </button>
      </Form>
    )}
  </Formik>
);

export default RegisterForm; 
auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
  
    if (!username || !email || !password) {
      return res.status(400).json({ message: 'Please fill in all fields' });
    }
  
    try {
      let user = await User.findOne({ email });
  
      if (user) {
        return res.status(400).json({ message: 'User already exists' });
      }
  
      user = new User({
        username,
        email,
        password,
      });
  
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
  
      await user.save();
  
      const payload = {
        user: {
          id: user.id,
        },
      };
  
      jwt.sign(
        payload,
        process.env.JWT_SECRET,
        { expiresIn: 360000 },
        (err, token) => {
          if (err) throw err;
          res.json({ token });
        }
      );
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server error');
    }
  }); 

index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description"content="Web site created using create-react-app"/>
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

DashBoard .js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/dashboard.css'; 
import { useCart } from '../context/CartContext';
const images = [
  {
    image: "https://jooinn.com/images/sunflower-plant-3.jpg",
    artist: "Jane Doe", title: "Sunflower",
    description: "The sunflower is a tall, bright yellow annual plant known for its large flower heads and nutrient-rich seeds.",
    price: 100
  },
  {
    image: "https://th.bing.com/th/id/R.35aff707df04534e79084ef828c313df?rik=XA2GvrM7UsKq3w&riu=http%3a%2f%2fwallpapercave.com%2fwp%2fL20UwTs.jpg&ehk=QeLqHXJq1PIiAFdOBPW1heNVt1Sxnaq%2fLOWpG9DIRME%3d&risl=&pid=ImgRaw&r=0",
    title: "Rose",
    description: "The rose is a fragrant, woody perennial flower known for its layered petals and vibrant colors, often symbolizing love and beauty.",
    artist:"Rose Petal Artistry",
    price: 200
  },
  {
    image: "https://www.gardeningknowhow.com/wp-content/uploads/2021/07/hibiscus-syriacus.jpg",
    title: "Hibiscus",
    description: "Hibiscus is a vibrant tropical plant with large, colorful flowers, often used in gardens and herbal teas.",
    artist:"Tropical Hibiscus",
    price: 250
  },
  {
    image: "https://c02.purpledshub.com/uploads/sites/62/2023/09/Gold-Comedy-Bird-Photo-b38d302.jpg?w=1029&webp=1",
    title: "Bird",
    description: "Birds are warm-blooded vertebrates characterized by feathers, beaks, and a high metabolic rate, known for their ability to fly and melodic songs.",
    artist:"Avianna Skye",
    price: 300
  },
  {
    image: "https://images.unsplash.com/photo-1534269222346-5a896154c41d?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    title: "Forest",
    description: "A forest is a dense, lush expanse of trees and undergrowth, teeming with diverse wildlife and resonating with the sounds of nature.",
    artist:"Sylvan Echo",
    price:360
  },
  {
    image: "https://www.lukas-petereit.com/wp-content/uploads/2017/10/Moraine-Lake-Lake-Louise-Ten-Peaks-Snow-Alberta-Banff-National-Park-Rocky-Mountains-Nature-Hike-Photo-Spot-Location-Travel-Roadtrip-Forest-1.jpg",
    title: "Landscape",
    description: "A landscape is a picturesque view of natural scenery, encompassing mountains, valleys, rivers, and fields that create a harmonious connection between earth and sky.",
    artist:"Terra Vista",
    price:400
  },
  {
    image: "https://www.photojaanic.com/blog/wp-content/uploads/sites/2/2017/07/food-photography-tips-photojaanic-35.jpg",
    title: "Food",
    description: "Food is a delightful array of flavors, textures, and aromas that nourish the body and bring people together in shared experiences.",
    artist:"Gourmet Palette",
    price:480
  },
  {
    image: "https://cdn-cms.f-static.net/uploads/2039516/2000_5d03e5ca7d540.png",
    title: "Plant",
    description: "A plant is a living organism that grows from the earth, utilizing sunlight, water, and nutrients to flourish and contribute to the ecosystem.",
     artist:"Verdant Whisper",
    price:380
  },  
  {
    image: "https://static.vecteezy.com/system/resources/thumbnails/033/931/023/small_2x/a-village-at-sunset-with-houses-and-mountains-in-the-background-ai-generated-photo.jpg",
    title: "House",
    description: "A village is a small, close-knit community where people live and work together, surrounded by rural landscapes and traditional ways of life.",
    artist: "Homestead Canvas",
    price:480
  },
  {
    image: "https://cf.bstatic.com/xdata/images/hotel/max1024x768/295090917.jpg?k=d17621b71b0eaa0c7a37d8d8d02d33896cef75145f61e7d96d296d88375a7d39&o=&hp=1",
    title: "Villa",
    description: "A villa is a luxurious, spacious residence often situated in a scenic or tranquil setting, offering comfort, elegance, and privacy.",
    artist:"Elegant Manor",
    price:800
  },
  {
    image: "https://img.freepik.com/free-photo/los-angeles-downtown-buildings-night_649448-298.jpg",
    title: "City",
    description: "A city is a bustling urban center teeming with people, diverse cultures, towering buildings, and a vibrant array of activities and opportunities.",
    artist:"Urban Harmony",
    price:700
  },
  {
    image: "https://cdni.autocarindia.com/Utils/ImageResizer.ashx?n=https://cdni.autocarindia.com/News/RE-4.jpg&c=0&w=700",
    title: "Built",
    description: "A built bike refers to a bicycle that has been fully assembled, often customized or upgraded with specific parts for performance, comfort, or aesthetic appeal.",
    artist:"Constructed Vision",
    price:800
  },
  {
    image: "https://cdn.pixabay.com/photo/2021/01/06/07/33/old-woman-5893415_960_720.jpg",
    title: "Portrait",
    description: "An old portrait is a timeless depiction of an individual, capturing their likeness and essence from a bygone era, often evoking a sense of history and nostalgia.",
    artist: "Ethereal Likeness",
    price:650
  },
  {
    image: "https://www.tripsavvy.com/thmb/S2HdI_qKPlhTaAPD5ufICC9lJ_E=/3000x2040/filters:fill(auto,1)/GettyImages-472768194-5d167ebc1a634312b25a98ca5d6613f9.jpg",
    title: "Gallery",
    description: "A gallery is a curated space where artworks, photographs, and other creative expressions are displayed for public viewing and appreciation.",
    artist: "Curated Essence",
    price:1000
  },
  {
    image: "https://www.shutterstock.com/shutterstock/photos/2287022079/display_1500/stock-photo-boy-looking-at-sculptures-and-listening-to-audio-guide-at-museum-exhibition-2287022079.jpg",
    title: "Music",
    description: "Music is an art form composed of organized sound and silence, evoking emotions and telling stories through melody, harmony, rhythm, and timbre.",
    artist:"Fireside Essence",
    price:750
  },
  {
    image: "https://tetongear.com/cdn/shop/articles/Campfire-Safety-4-of-4-scaled.jpg?v=1687284054",
    title: "Campfire",
    description: "A campfire is a blazing outdoor fire, often the focal point of gatherings, providing warmth, light, and a cozy atmosphere for storytelling and bonding.",
    artist:"Fireside Essence",
    price: 450
  },
  {
    image: "https://www.adobe.com/content/dam/cc/us/en/creativecloud/photography/discover/concert-photography/thumbnail.jpeg",
    title: "Concert",
    description: "A concert is a live musical performance featuring musicians or bands, often held in venues ranging from intimate clubs to large arenas, providing an immersive experience for audiences.",
    artist:"Live Melody",
    price:600
  },
  {
    image: "https://novacolorpaint.com/cdn/shop/articles/UNIQUE_ACRYLIC_PAINTING_IDEAS_YOU_HAVE_TO_TRY_1200x1200.jpg?v=1685294336",
    title: "Painting",
    description: "A painting is an artistic creation made by applying pigments to a surface, expressing ideas, emotions, and stories through color, texture, and composition.",
    artist:"Artful Strokes",
    price:770  
  },
  {
    image:"https://t6c9u7h6.rocketcdn.me/wp-content/uploads/2022/09/fancy-keats.jpg",
    title:"Still life photogarphy",
    description:"Still life photography is the art of capturing inanimate objects arranged in a purposeful composition, focusing on detail, texture, light, and shadow to create visually compelling and often symbolic images.",
    artist:"Silent Essence",
    price:1000
  },
  {
    image: "https://wallpaperaccess.com/full/4930793.jpg",
    title: "Football",
    description:"Football is a dynamic and strategic sport played between two teams, where players aim to score goals by maneuvering a ball into the opposing team's net, celebrated worldwide for its excitement and athleticism.",
    artist:"Gridiron Artist",
    price:800
  },
  {
    image:"https://www.mydomaine.com/thmb/GQvCChTeRe93o59LQpRJA92Gu40=/5524x3683/filters:no_upscale():max_bytes(150000):strip_icc()/DesignbyEmilyHendersonDesignPhotographerbySaraTramp_181-ba033340b54147399980cfeaed3673ee.jpg",
    title:"Living Room",
    description:"A living room is a welcoming and versatile space in a home, designed for relaxation and socializing, typically featuring comfortable seati
    artist:"Cozy Corner Creations",ng, entertainment systems, and personalized decor to create a cozy and inviting atmosphere.",
    price:1500
  },
  {
    image:"https://inspirationfeed.com/wp-content/uploads/2017/06/Art-Quotes-from-Famous-Artists22-min.jpg",
    title:"Art Work",
    description:"Artwork is a creative expression manifested through various mediums such as painting, sculpture, photography, or digital art, reflecting the artist's vision, emotions, and ideas, often evoking thought and appreciation in its audience.",
    artist:"Masterpiece Maker",
    price:250
  },
  {
    image:"https://th.bing.com/th/id/OIP.216g-WQs1oH6fyKe00KdZgHaEK?rs=1&pid=ImgDetMain",
    title:"New York",
    description:"New York is a bustling, vibrant metropolis known for its iconic skyline, diverse neighborhoods, cultural landmarks, and dynamic energy, blending historic charm with modern innovation and serving as a global hub for art, commerce, and entertainment.",
    artist:"Metropolitan Muse",
    price:400
  },
  {
    image:"https://i.pinimg.com/736x/c9/ec/9c/c9ec9cd034f884913e39142522114534.jpg",
    title:"Art",
    description:"Art is a diverse range of human activities and creations that express ideas, emotions, and perspectives through various forms such as painting, sculpture, music, dance, and literature, often aiming to provoke thought, evoke feelings, or simply provide aesthetic pleasure.",
    artist:"Artisan Aura",
    price:600
  },
];

const Dashboard = () => {
  const navigate = useNavigate();
  const { cart, addToCart } = useCart();

  const handleCartClick = () => {
    navigate('/cart');
  };

  return (
    <>
      <div>
        <button className="cart" onClick={handleCartClick}>
          Cart ({cart.length})
        </button>
      </div>
      <div className="card-container">
        {images.map((item, index) => (
          <div className="card" style={{ width: '18rem' }} key={index}>
            <img src={item.image} className="card-img-top" alt={item.title} />
            <div className="card-body">
              <h5 className="card-title">{item.title}</h5>
              <p className="card-text">{item.description}</p>
              <p className="card-artist">Artist: {item.artist}</p>
              <p className="card-price">Price: ${item.price}</p>
              <button className="btn btn-primary" onClick={() => addToCart(item)}>
                Add to cart
              </button>
            </div>
          </div>
        ))}
      </div>
    </>
  );
};

export default Dashboard;

Artisiprofile.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const ArtistProfile = () => {
  const { id } = useParams();
  const [artist, setArtist] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchArtist = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/api/artists/${id}`); // Update URL as needed
        setArtist(response.data);
      } catch (error) {
        console.error('Network Error:', error);
        setError('Failed to fetch artist details.');
      }
    };

    fetchArtist();
  }, [id]);

  if (error) return <div>{error}</div>;

  if (!artist) return <div>Loading...</div>;

  return (
    <div>
      <h1>{artist.name}</h1>
      <p>{artist.bio}</p>
      {/* Display artist portfolio */}
    </div>
  );
};

Artistprofile.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const ArtistProfile = () => {
  const { id } = useParams();
  const [artist, setArtist] = useState(null);

  useEffect(() => {
    const fetchArtist = async () => {
      try {
        const response = await axios.get(`/api/artists/${id}`);
        setArtist(response.data);
      } catch (error) {
        console.error(error);
      }
    };
    fetchArtist();
  }, [id]);

  const handleDelete = async () => {
    try {
      await axios.delete(`/api/artists/${id}`);
      alert('Artist profile deleted successfully!');
    } catch (error) {
      console.error(error);
      alert('Failed to delete artist profile.');
    }
  };

  if (!artist) return <div>Loading...</div>;

  return (
    <div>
      <h2>{artist.name}</h2>
      <p>{artist.bio}</p>
      <div>
        <h3>Portfolio</h3>
        {artist.portfolio.map((url, index) => (
          <img key={index} src={url} alt={`Portfolio ${index + 1}`} style={{ width: '100px', height: '100px' }} />
        ))}
      </div>
      <button onClick={handleDelete}>Delete Profile</button>
    </div>I am a passionate artist specializing in contemporary abstract art. My work often delves into themes of emotion and perception, using bold colors and dynamic forms to create pieces that invite reflection and interpretation. My artistic journey began with a love for traditional painting, which has evolved into a unique style blending modern techniques with classic influences. Through my art, I aim to engage viewers and evoke a sense of wonder and introspection.
  );
};

export default ArtistProfile;

Regisrer.css
.register-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f9f9f9;
  }
  
  .register-form {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    width: 100%;
  }
  
  .register-form h2 {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 5px;
  }
  
  .form-group input {
    width: 100%;
    padding: 8px;
    box-sizing: border-box;
  }
  
  button {
    width: 100%;
    padding: 10px;
    background-color: #007bff;
    border: none;
    color: #fff;
    cursor: pointer;
    border-radius: 4px;
  }
  
  button:hover {
    background-color: #0056b3;
  }

login.css 
.login-page {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-image: url('https://images.unsplash.com/photo-1566991301508-34cc35889df5?q=80&w=1770&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}

.login-container {
  background-color: rgba(255, 255, 255, 0.8);
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.login-form {
  width: 100%;
  max-width: 400px;
}

.form-group {
  margin-bottom: 15px;
}

.form-control {
  width: 100%;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.form-control.is-invalid {
  border-color: #dc3545;
}

.invalid-feedback {
  color: #dc3545;
  font-size: 0.875em;
}

.btn-primary {
  width: 100%;
  padding: 10px;
  border-radius: 5px;
  border: none;
  background-color: #007bff;
  color: white;
}

cart.js 
import React from 'react';
import { useCart } from '../context/CartContext';
import '../styles/Cart.css'; // Correct case

const Cart = () => {
  const { cart } = useCart();

  return (
    <div className="cart-container">
      <h1>Your Cart</h1>
      {cart.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <ul>
          {cart.map((item, index) => (
            <li key={index} className="cart-item">
              <img src={item.image} alt={item.title} className="cart-item-image" />
              <div className="cart-item-details">
                <h2>{item.title}</h2>
                <p>{item.description}</p>
                <p>Artist: {item.artist}</p>
                <p>Price: ${item.price}</p>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default Cart;

store.js
mport { configureStore } from '@reduxjs/toolkit';
import cartReducer from './slices/cartSlice';

const isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;

const store = configureStore({
  reducer: {
    cart: cartReducer,
  },
  devTools: isDev, 
});  

export default store;

cartslice.js
import { createSlice } from '@reduxjs/toolkit';

const cartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [],
  },
  reducers: {
    addToCart: (state, action) => {
      state.items.push(action.payload);
    },
    removeFromCart: (state, action) => {
      state.items = state.items.filter(item => item.id !== action.payload.id);
    },
    clearCart: (state) => {
      state.items = [];
    },
  },
});

export const { addToCart, removeFromCart, clearCart } = cartSlice.actions;
export default cartSlice.reducer; 

About.css 
body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: url('.https://images.unsplash.com/photo-1681025243786-131a32e60967?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D') no-repeat center center fixed;
    background-size: cover;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  
  .about-container {
    max-width: 600px;
    width: 100%;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent background */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  /* Add additional styles specific to the About page */